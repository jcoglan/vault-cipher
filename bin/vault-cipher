#!/usr/bin/env node

'use strict';

const Cipher  = require('..'),
      fs      = require('fs'),
      path    = require('path'),
      nopt    = require('nopt');

let options = {
  key:    String,
  salt:   String,
  work:   Number,
  format: String,
  input:  path,
  output: path
};

let shorts  = {
  k: '--key',
  s: '--salt',
  w: '--work',
  f: '--format',
  i: '--input',
  o: '--output'
};

function concat(stream, callback) {
  let chunks = [], size = 0;

  stream.on('data', (chunk) => {
    chunks.push(chunk);
    size += chunk.length;
  });

  stream.on('end', () => {
    callback(null, Buffer.concat(chunks, size));
  });

  stream.on('error', (error) => callback(error));
};

function die(message) {
  console.error(message);
  process.exit(1);
};

let params = nopt(options, shorts),
    cipher = new Cipher(params.key, { salt: params.salt, work: params.work, format: params.format }),
    input  = params.input ? fs.createReadStream(params.input) : process.stdin,
    output = params.output ? fs.createWriteStream(params.output) : process.stdout;

let operation = params.argv.remain[0];

if (['encrypt', 'decrypt'].indexOf(operation) < 0)
  die('Operation must be either "encrypt" or "decrypt"');

concat(input, (error, buffer) => {
  if (error) die(error.message);

  try {
    let result = cipher[operation](buffer.toString('utf8'));
    output.write(result);
  } catch (e) {
    die(e.message);
  }
});
